/*
 * matrix.h
 *
 *  Created on: Apr 5, 2022
 *      Author: pudja
 */

#ifndef ARM_MATH_S16_MATRIX_H_
#define ARM_MATH_S16_MATRIX_H_

#include "math.h"

/**
 * @brief Error status returned by some functions in the library.
 */
typedef enum
{
  ARM_MATH_SUCCESS = 0, /**< No error */
  ARM_MATH_ARGUMENT_ERROR = -1, /**< One or more arguments are incorrect */
  ARM_MATH_LENGTH_ERROR = -2, /**< Length of data buffer is incorrect */
  ARM_MATH_SIZE_MISMATCH = -3, /**< Size of matrices is not compatible with the operation. */
  ARM_MATH_NANINF = -4, /**< Not-a-number (NaN) or infinity is generated */
  ARM_MATH_SINGULAR = -5, /**< Generated by matrix inversion if the input matrix is singular and cannot be inverted. */
  ARM_MATH_TEST_FAILURE = -6 /**< Test Failed  */
} arm_status;

/**
 * @brief Instance structure for the S16 matrix structure.
 */
typedef struct
{
  uint16_t numRows; /**< number of rows of the matrix.     */
  uint16_t numCols; /**< number of columns of the matrix.  */
  int16_t *pData; /**< points to the data of the matrix. */
} arm_matrix_instance_s16;

/* Public function prototypes */
void arm_mat_init_s16(arm_matrix_instance_s16 *S, uint16_t nRows, uint16_t nColumns, int16_t *pData);
arm_status arm_mat_trans_s16(const arm_matrix_instance_s16 *pSrc, arm_matrix_instance_s16 *pDst);

#endif /* ARM_MATH_S16_MATRIX_H_ */
